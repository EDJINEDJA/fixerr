#!/bin/bash

# Validate input
if [ "$#" -ne 1 ]; then
    echo "Usage: fixerr <file>"
    exit 1
fi

FILE=$1
EXTENSION="${FILE##*.}"

# Detect language and executor
case "$EXTENSION" in
    "py") EXECUTOR="python" ;;
    "js") EXECUTOR="node" ;;
    "rb") EXECUTOR="ruby" ;;
    "go") EXECUTOR="go run" ;;
    *)
        echo "Unsupported file extension: $EXTENSION"
        exit 1
        ;;
esac

# Execute code and capture output
OUTPUT=$($EXECUTOR "$FILE" 2>&1)
RETURN_CODE=$?

if [ $RETURN_CODE -eq 0 ]; then
    echo "✅ Code executed successfully!"
    exit 0
else
    echo "🔍 Error detected, analyzing..."

    # Create temporary files to safely pass multiline content
    TMP_OUTPUT=$(mktemp)
    TMP_CODE=$(mktemp)

    echo "$OUTPUT" > "$TMP_OUTPUT"
    cat "$FILE" > "$TMP_CODE"

    # Call Python analyzer via heredoc
    ANALYSIS=$(python3 <<EOF
import sys
sys.path.insert(0, "/usr/local/lib/fixerr")

from src.llm.analyzer import analyze_error

with open("$TMP_OUTPUT", "r") as f:
    output = f.read()

with open("$TMP_CODE", "r") as f:
    code = f.read()

ext = "$EXTENSION"
result = analyze_error(ext, output, code)
print(result)
EOF
)

    # Clean up temp files
    rm -f "$TMP_OUTPUT" "$TMP_CODE"

    echo -e "\n💡 Suggested fixes:"
    echo "$ANALYSIS"
    exit $RETURN_CODE
fi
